version: 2
jobs:
  build:
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/gke
    steps:
      - run:
          name: Store Service Accounts
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            chmod 600 $HOME/gcloud-service-key.json

      - run:
          name: Get Credentials
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet components install kubectl beta

            gcloud --quiet beta container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

      - run:
          name: Setup SSL cert & SANS with cert-bot
          command: |
            apk add -U python2 augeas gcc python2-dev musl-dev libffi-dev openssl-dev py2-pip jq
            cd /root/

            # https://github.com/certbot/certbot/releases
            wget https://github.com/certbot/certbot/archive/v0.25.1.tar.gz
            tar -xzf ./v0.25.1.tar.gz
            cd certbot-0.25.1
            pip install ./
            cd certbot-dns-google
            python setup.py install

            if [ -z "$CERTBOT_CSV_ALL_DOMAINS" ]; then
              export CERTBOT_CSV_ALL_DOMAINS=$PRIMARY_DOMAIN
            fi
            certbot certonly --email $CERTBOT_EMAIL --rsa-key-size 2048 \
              --agree-tos --non-interactive \
              --dns-google --dns-google-propagation-seconds 70 \
              --dns-google-credentials $HOME/gcloud-service-key.json \
              -d "$CERTBOT_CSV_ALL_DOMAINS"

            export TLS_SECRET=${PRIMARY_DOMAIN/./-}
            kubectl create secret tls $TLS_SECRET-tls \
              --cert=/etc/letsencrypt/live/$PRIMARY_DOMAIN/fullchain.pem \
              --key=/etc/letsencrypt/live/$PRIMARY_DOMAIN/privkey.pem \
              --dry-run -o yaml | kubectl apply -f -

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 0 11 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
